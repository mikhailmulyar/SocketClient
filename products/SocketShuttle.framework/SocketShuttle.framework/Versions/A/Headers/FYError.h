//
//  FYError.h
//  SocketShuttle
//
//  Created by Marius Rackwitz on 09.05.13.
//  Copyright (c) 2013 Marius Rackwitz. All rights reserved.
//
//
//  The MIT License
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

#import <Foundation/Foundation.h>


/**
 Error domain used for all errors generated by FYSocket.
 */
extern NSString *const FYErrorDomain;

/**
 Internal used grouping for error codes.
 
 Use error group enum key in custom error handling to code to check for a group of errors,
 which can occur in the same layer.
 
 @warning This is not part of an official standard.
 */
typedef NS_ENUM(NSInteger, FYErrorGroup) {
    /// The error occured in Web Socket layer.
    FYErrorGroupWebSocket = 100,
    
    /// The error occured in JSON layer. (serialization / deserialization)
    FYErrorGroupJSON = 200,
    
    /// The error occured in Bayeux layer by a message which was not "successful".
    FYErrorGroupBayeux = 300,
    
    /// The error occured in Bayeux layer by a message with an advice.
    FYErrorGroupBayeuxAdvice = 400,
};

/**
 Internal used error code.
 
 Use error code enum key instead of value or error description string to check for a specific error.
 
 @warning This is not part of an official standard.
 */
typedef NS_ENUM(NSInteger, FYErrorCode) {
    /**
     Like nil for FYErrorCode values, represents an error code that
     has not been initialized yet.
     */
    FYErrorInvalid = 0,
    
    
    /// The socket connection was disconnected.
    FYErrorSocketClosed = FYErrorGroupWebSocket | 1,
    
    /// The socket connection is not opened, but required to be open.
    FYErrorSocketNotOpen = FYErrorGroupWebSocket | 2,
    
    
    /// The data to send response was malformed. (serialization)
    FYErrorMalformedObjectData = FYErrorGroupJSON | 1,
    
    /// The received JSON response was malformed. (deserialization)
    FYErrorMalformedJSONData = FYErrorGroupJSON | 2,
    
    
    /// The client received an unhandled meta channel message.
    FYErrorUnhandledMetaChannelMessage = FYErrorGroupBayeux | 1,
    
    /// The handshake failed.
    FYErrorHandshakeFailed = FYErrorGroupBayeux | 20,
    
    /// The connection failed.
    FYErrorConnectFailed = FYErrorGroupBayeux | 30,
    
    /// The connection failed because of no common supported connection type.
    FYErrorNoCommonSupportedConnectionType = FYErrorConnectFailed | 1,
    
    /// The disconnect failed.
    FYErrorDisconnectFailed = FYErrorGroupBayeux | 40,
    
    /// The channel subscribe failed.
    FYErrorSubscribeFailed = FYErrorGroupBayeux | 50,
    
    /// The channel unsubscribe failed.
    FYErrorUnsubscribeFailed = FYErrorGroupBayeux | 60,
    
    
    /// The server send advice 'reconnect' with value 'none'.
    FYErrorReceivedAdviceReconnectTypeNone = FYErrorGroupBayeuxAdvice | 7,
};
